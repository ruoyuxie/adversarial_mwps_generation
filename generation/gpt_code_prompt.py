# -*- coding: utf-8 -*-

import json
import os
import re

import openai
from openai_cost_tracker import query_openai


def extract_problem_solutions(json_file):
    with open(json_file, 'r') as file:
        data = json.load(file)

    problems_solutions = {}
    for item in data:
        problem = item.get('question')
        solution = item.get('final_ans')
        if problem and solution:
            problems_solutions[problem] = solution

    return problems_solutions


def generate_prompt(problem, answer):
    return (f'Write a Python script that contains a step-by-step solution for a given math problem and its answer. '
            f'Start the script by defining variables corresponding to the quantities mentioned in the problem. Print '
            f'the final answer at the end of the script. Do not use if-else statements and loops to solve the '
            f'problem. \n\nGiven problem: "{problem}" \nAnswer: "{answer}"\nPython script:')


def get_completion(prompt, model="gpt-4-0125-preview"):
    messages = [{"role": "user", "content": prompt}]
    response = query_openai(
        model=model,
        messages=messages,
        temperature=0,
        max_tokens=1024,
        simulation=False,
        print_cost=True
    )
    return response["choices"][0]["message"]["content"]


def save_code(code, json_file):
    with open(json_file, 'w', encoding='utf-8') as file:
        file.write(code)


def ask_gpt(question):
    prompt = (f'Please provide the answer to the following question, with answer enclosed in \\fbox{{}}.\n\n'
              f'Given problem: \"{question}\"')

    response = get_completion(prompt)

    answer = re.search(r'\\fbox\{(.*?)}', response).group(1)
    return int(answer)


def main_process(question_file, output_directory, openai_key_path):

    # generate python code from problem and solution
    print("Generating python code from problem and solution...")

    # read api key from a text file
    openai.api_key = open(openai_key_path).read()

    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Check the code directory is empty
    # assert not os.listdir(output_directory), ("The code directory is not empty, maybe codes are already prompted and generated by GPT")

    result = extract_problem_solutions(question_file)

    all_prompts = []
    for problem, solution in result.items():
        prompt = generate_prompt(problem, solution)
        all_prompts.append(prompt)

    for i, prompt in enumerate(all_prompts):

        python_file = str(i) + ".py"
        output_code_file = os.path.join(output_directory, python_file)

        if os.path.exists(output_code_file):
            print(f"File {output_code_file} already exists, skipping generating python code...")
            continue
        
        response = get_completion(prompt)

        if '```python' in response and '```' in response:
            start_idx = response.index('```python') + len('```python')
            end_idx = response.index('```', start_idx)
            extracted_response = response[start_idx:end_idx].strip()
        else:
            extracted_response = response.strip()

        # save original_code to file, file name is the index of the prompt
        save_code(extracted_response, output_code_file)

    print("Python code generation completed.\n")